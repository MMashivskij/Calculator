{"version":3,"sources":["components/number_provider.jsx","components/dispay.jsx","components/clear_button.jsx","components/number_button.jsx","components/function_button.jsx","components/equal_button.jsx","components/memory_button.jsx","components/calculator.jsx","App.js","reportWebVitals.js","index.js"],"names":["NumberContext","React","createContext","NumberProvider","props","useState","number","setNumber","inMemory","setInMemory","storedNumber","setStoredNumber","result","setResult","functionType","setFunctionType","useEffect","onKeypress","e","preventDefault","key","match","handleSetDisplayValue","handleSetCalcFunction","doMath","document","addEventListener","removeEventListener","num","includes","handleSetStoredValue","type","Math","round","parseFloat","alert","Provider","value","handleClearValue","handleRememberValue","handleToggleNegative","positiveNumber","slice","children","Display","useContext","length","className","ClearButton","onClick","src","alt","CalculatorButton","buttonValue","FunctionButton","EqualButton","MemoryButton","Calculator","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d4efecaa.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport const NumberContext = React.createContext();\n\nconst NumberProvider = props => {\n  const [number, setNumber] = useState('');\n  const [inMemory, setInMemory] = useState('');\n  const [storedNumber, setStoredNumber] = useState('');\n  const [result, setResult] = useState('');\n  const [functionType, setFunctionType] = useState('');\n  // const [expression, setExpression] = useState('');\n\n  useEffect(() => {\n    const onKeypress = e => {\n      e.preventDefault();\n      if(e.key.match(/[0-9]/)) {\n        handleSetDisplayValue(e.key);\n      } \n      if (e.key === '+' || \n          e.key === '-' || \n          e.key === '*' || \n          e.key === '/' || \n          e.key === '%') {\n        handleSetCalcFunction(e.key)\n      }\n      if(e.key === 'Enter') {\n        doMath();\n      }\n    };\n  \n    document.addEventListener('keypress', onKeypress, false);\n  \n    return () => {\n      document.removeEventListener('keypress', onKeypress);\n    };\n  }, [functionType]);\n\n  const handleSetDisplayValue = num => {\n    if ((!number.includes('.') || num !== '.')) {\n      setNumber(`${(number + num)}`);\n    }\n  };\n\n  const handleRememberValue = () => {\n    if(inMemory) {\n      handleSetDisplayValue(inMemory);\n    } else {\n      setInMemory(number);\n    }\n  }\n\n  const handleSetStoredValue = () => {\n    setStoredNumber(number);\n    setNumber('');\n  };\n\n  const handleClearValue = () => {\n    setNumber('');\n    setStoredNumber('');\n    setFunctionType('');\n  };\n\n  const handleSetCalcFunction = type => {\n    if (number) {\n      setFunctionType(type);\n      handleSetStoredValue();\n    }\n    if (storedNumber) {\n      setFunctionType(type);\n    }\n  };\n\n  const handleToggleNegative = () => {\n    if (number) {\n      if (number > 0) {\n        setNumber(`-${number}`);\n      } else {\n        const positiveNumber = number.slice(1);\n        setNumber(positiveNumber);\n      }\n    } else if (storedNumber > 0) {\n      setStoredNumber(`-${storedNumber}`);\n    } else {\n      const positiveNumber = storedNumber.slice(1);\n      setStoredNumber(positiveNumber);\n    }\n  };\n\n  const doMath = () => {\n    if (number && storedNumber) {\n      switch (functionType) {\n        case '+':\n          setResult(`${Math.round(`${(parseFloat(storedNumber) + parseFloat(number)) * 100}`) / 100}`);\n          break;\n        case '-':\n          setResult(`${Math.round(`${(parseFloat(storedNumber) - parseFloat(number)) * 1000}`) / 1000}`);\n          break;\n        case '/':\n          if(number == 0) {\n            alert(\"It is impossible to divide by zero\")\n            break;\n          }\n          setResult(`${Math.round(`${(parseFloat(storedNumber) / parseFloat(number)) * 1000}`) / 1000}`);\n          break;\n        case '*':\n          setResult(`${Math.round(`${parseFloat(storedNumber) * parseFloat(number) * 1000}`) / 1000}`);\n          break;\n        case '%':\n          setResult(`${Math.round(`${parseFloat(storedNumber) / 100 * parseFloat(number) * 1000}`) / 1000}`)\n        default:\n          break;\n      }\n      setNumber('');\n      setFunctionType('');\n    }\n  };\n\n  return (\n    <NumberContext.Provider\n      value={{\n        doMath,\n        functionType,\n        handleClearValue,\n        handleRememberValue,\n        handleSetCalcFunction,\n        handleSetDisplayValue,\n        handleSetStoredValue,\n        handleToggleNegative,\n        number,\n        result,\n        storedNumber,\n        setNumber,\n      }}\n    >\n      {props.children}\n    </NumberContext.Provider>\n  );\n};\n\nexport default NumberProvider;","import React, { useContext } from 'react';\nimport { NumberContext } from './number_provider';\n\nconst Display = () => {\n\n  const { number, storedNumber, functionType } = useContext(NumberContext);\n  return (\n    <div>\n      <h2>\n        {!number.length && !storedNumber ? '0' : number || storedNumber}\n      </h2>\n      <p className=\"secondDisplay\">\n        {!storedNumber ? 'ENTER SOME NUMBERS' : `${storedNumber} ${functionType} ${number}`}\n      </p>\n    </div>\n  );\n};\n\nexport default Display;","import React, { useContext } from 'react';\nimport { NumberContext } from './number_provider';\n\nconst ClearButton = () => {\n  const { handleClearValue } = useContext(NumberContext);\n  return (\n    <button className=\"button clearBlock\" type=\"button\" onClick={() => handleClearValue()}>\n      <img className=\"clear\" src=\"./images/clear.png\" alt=\"clear\"/>\n    </button>\n  );\n};\n\nexport default ClearButton;","import React, { useContext } from 'react';\nimport { NumberContext } from './number_provider';\n\nconst CalculatorButton = ({ buttonValue }) => {\n  const { handleSetDisplayValue } = useContext(NumberContext);\n  return (\n    <button className=\"button\" type=\"button\" onClick={() => handleSetDisplayValue(buttonValue)}>\n      {buttonValue}\n    </button>\n  );\n};\n\nexport default CalculatorButton;","import React, { useContext } from 'react';\nimport { NumberContext } from './number_provider';\n\nconst FunctionButton = ({ buttonValue }) => {\n  const { handleSetCalcFunction } = useContext(NumberContext);\n  return (\n    <button className=\"button\" type=\"button\" onClick={() => handleSetCalcFunction(buttonValue)}>\n      {buttonValue}\n    </button>\n  );\n};\n\nexport default FunctionButton;","import React, { useContext } from 'react';\nimport { NumberContext } from './number_provider';\n\nconst EqualButton = () => {\n  const { doMath } = useContext(NumberContext);\n  return (\n    <button className=\"equal\" type=\"button\" onClick={() => doMath()}>\n      =\n    </button>\n  );\n};\n\nexport default EqualButton;","import React, { useContext } from 'react';\nimport { NumberContext } from './number_provider';\n\nconst MemoryButton = () => {\n\n  const { handleRememberValue } = useContext(NumberContext);\n\n  return (\n    <button className=\"button memory\" type=\"button\" onClick={handleRememberValue}>\n      AC\n    </button>\n  );\n};\n\nexport default MemoryButton;","import React from 'react';\nimport Display from './dispay';\nimport ClearButton from './clear_button';\nimport NumberButton from './number_button';\nimport FunctionButton from './function_button';\nimport EqualButton from './equal_button';\nimport MemoryButton from './memory_button';\n\nconst Calculator = () => {\n\n  return (\n  <div className=\"calculator\">\n    <div className='display'>\n      <Display />\n    </div>\n    <div className='number-pad'>\n      <MemoryButton />\n      <ClearButton />\n      <FunctionButton buttonValue='%' />\n      <FunctionButton buttonValue='/' />\n      <NumberButton buttonValue={7} />\n      <NumberButton buttonValue={8} />\n      <NumberButton buttonValue={9} />\n      <FunctionButton buttonValue='*' />\n      <NumberButton buttonValue={4} />\n      <NumberButton buttonValue={5} />\n      <NumberButton buttonValue={6} />\n      <FunctionButton buttonValue='-' />\n      <NumberButton buttonValue={1} />\n      <NumberButton buttonValue={2} />\n      <NumberButton buttonValue={3} />\n      <FunctionButton buttonValue='+' />\n      <NumberButton buttonValue='.' />\n      <NumberButton buttonValue={0} />\n      <div className=\"equalBlock\">\n        <EqualButton />\n      </div>\n    </div>\n  </div>\n)};\n\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from './components/calculator';\nimport NumberProvider from './components/number_provider';\n\nfunction App() {\n\n  return (\n    <NumberProvider>\n      <Calculator />\n    </NumberProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}